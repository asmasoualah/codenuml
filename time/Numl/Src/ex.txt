





bugs 







-

/






===============================



(1.0e20{23} + 1.0{23}) - 1.0e20{23} ;;



(1.0e16 + 1.0) - 1.0e16 ;;



(1.0e15 + 1.0) - 1.0e15 ;;



let f x = x + 1.0;;



f 1.234



let rec g x = if x < 1.0 then 1.0 else g (x * 0.07) ;;
let rec g x = if x <{*,10,15} 1.0 then x else g (x * 0.07) ;;


let rec f x y = if ((x-y)<0.0) then x else f (x * 0.6) y ;;
let rec f x y = if (x <{6,9} y) then x else f (x * 0.6) y ;;

let rec f x = if (x> 1000.0) then x else f (x * 1.8) ;;



f 999.9


1.0 ;;



1.0{10,5} ;;



let f x = x + 1.0;;



verbose true;;



f;;



verbose false ;;



f 5.5;;



let rec f x = if (x> 1000.0{10,55}) then x else f (x * 16.2) ;;



f 2.2;; f 99999.9 ;;



f 999.9 ;; (* il doit afficher zero bit correct de resultat mais pas de bug *)



let rec fact{*,10} n = if (n=0.0) then 1.0 else n * (fact (n - 1.0));;



let rec fact n = if (n=0.0{10, 5}) then 1.0 else n * (fact (n - 1.0));; (* vraiment faux : 5 bits n'atteignent pas le 0 *)

let rec fact n = if (n=0.0{10,15}) then 1.0 else n * (fact (n - 1.0));; (* vraiment faux : n{11,*} pas comp avec 1.0{0,*} *)



let rec fact n = if (n=0.0{10,15}) then 1.0{10,15} else n * (fact (n - 1.0));; (* OK *)
let rec fact n = if (n<{10,15} 1.0) then 1.0{10,15} else n * (fact (n - 1.0));;
let rec fact n = if (n={17,8}0.0) then 1.0{10,15} else n * (fact (n - 1.0));;


let rec fact n = if (n = 0.0) then 1.0{10,15} else n * (fact (n - 1.0));;



> fact 4.0{2,5} ;;

- : Float{10,15} = 24.



> fact 50.0{5,5};;

- : Float{10,15} = 3.04140932017e+64 (* il doit afficher zero bit correct de resultat mais pas de bug *)




let rec pow x n = if (n=0) then 1.0{*,5,24} else x * (pow x (n -_ 1)) ;; 

let rec pow n x{-2,20} = if (n=1) then x else x * (pow (n -_ 1) x) ;; 

let rec pow x n = if (n=1) then x else x * (pow x (n -_ 1)) ;; 

let rec rectangle f a b h =
  if (a >= b) then 
    0.0{*,30,40}
  else
    ((f a) * h) + (rectangle f (a + h) b h) ;;





[*,-3,38] 
let rec horner p x{-3,20} = if (p = []) then 1.0 else (hd p) + (x * (horner (tl p) x)) ;;

horner [1.1;2.2;3.3] 0.1 ;;

let rec sqroot x a n = if (n=0) then x 
                       else sqroot ((x + (a / x)) * 0.5{2,20}) a (n -_ 1) ;;

horner [1.1;2.2;3.3] 1.0 ;;


let rec sqroot x a n = if (n=0) then x 
                       else sqroot ((x + (a / x)) * 0.5) a (n -_ 1) ;;
		     

let rec sqroot x{10,20} a n = if (n=0) then x 
                       else 
                         let r = ((x + (a / x)) * 0.5) in sqroot r a (n -_ 1) ;;


let rec f n = if (n=0) then 0.0 else 0.1 + (f (n -_ 1)) ;;

let rec taylor x{-1,25} xn i n = if (i>n) then 0.0{*,10,20} else xn + (taylor x (x*xn) (i+_ 1) n) ;;
1/(1-x)
let rec taylor xn x i n = if (i>n) then 0.0{10,20} else xn + (taylor (x*xn) x (i+_ 1) n) ;;

ln(1-x)
let rec taylor x xn i n = if (i>n) then 0.0 else (xn/n) + (taylor x (x*xn) (i + 1.0) n) ;;

ln(1+x)
let rec taylor x xn i n = if (i>n) then 0.0 else (xn/n) + (taylor x (x*xn*(-1.0{0,23})) (i + 1.0) n) ;; 


let rec f x = if (x> 1000.0) then x else f (x * 1.8) ;;

let rec sum l = if (l=[]) then 0.0{*,10,20} else (hd l)+(sum (tl l)) ;;


let sin x n = if (n =  1) then x else 


let rec sqroot n x = if (n=0) then x 
                       else sqroot (n -_ 1) ((x + (2.0 / x)) / 2.0)  ;;



