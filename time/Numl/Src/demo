
1.234 ;;

1.234{4} ;;

let f = fun x -> x + 1.0 ;;

verbose true ;;

f ;;

f 1.234 ;;

f 1.234{4}

let rec g x = if x < 1.0 then x else g (x * 0.07) ;;

g 1.0 ;;

g 2.0 ;;

let rec g x = if x <{*,10,15} 1.0 then x else g (x * 0.07) ;;

g 2.0 ;;

g 456.7 ;;

g 4567.8 ;;

let rec sum l=if (l=[]) then 0.0 else (hd l)+(sum (tl l)) ;;

let rec sum l=if (l=[]) then 0.0{*,10,20} else (hd l)+(sum (tl l)) ;;

let rec sum l[*,3,30] =if (l=[]) then 0.0 else (hd l)+(sum (tl l)) ;;

sum [1.1;2.2;3.3] ;;

sum [1.1;2.2;3.3] ;;

let rec taylor x xn i n = if (i>n) then 0.0{*,10,20} else xn + (taylor x (x*xn) (i+_ 1) n) ;;

taylor 0.2 1.0 0 5;;

let rec rectangle f a b h = if (a >= b) then 0.0{*,10,20} else ((f a) * h) + (rectangle f (a + h) b h) ;;

let rec g x = x * x ;;

rectangle g 0.0 2.0 0.01 ;;


x-3 2x-5  2x2 -11x 
let discriminant a b c = b * b - 4.0 * a * c ;;
discriminant 2.0 -11.0 15.0 ;;

let sphere r = (4.0 / 3.0) * 3.141592 * r * r * r ;;

let deriv f x h = ((f (x + h)) - (f x)) / h ;;
let g x = (x*x) - (5.0*x) + 6.0 ;;
deriv g 1.0 0.1;;

let newton x xold f fprime = if ((x-xold)<0.01{*,10,20}) then x else newton (x-((f x)/(fprime x))) x f fprime ;;

let rec newton x{10,20} n f fprime = if (n=0) then x else let xnew = (x-((f x)/(fprime x))) in (newton xnew (n-_1) f fprime) ;;
let g x = (x*x) - (5.0*x) + 6.0 ;;
let gprime x = 2.0 * x - 5.0 ;;
newton 9.0 5 g gprime ;;


let rec rectangle f a b h = if (a >= b) then 0.0{*,30,40} else ((f a) * h) + (rectangle f (a + h) b h) ;;
let g x = (x*x) - (5.0*x) + 6.0 ;;
rectangle g 0.0 1.0 0.01 ;;

let g x = (x*x) - (5.0*x) + 6.0 ;;
let deriv f x h = ((f (x + h)) - (f x)) / h ;;
deriv g 2.0 0.01 ;;
let gprime x = deriv g x 0.01 ;;
let newton x{10,20} xold{10,20} f fprime = if (x<0.01) then x else newton (x-((f x)/(fprime x))) x f fprime ;
newton 9.0 0.0 g gprime ;;


dotprod
euler
rk2

let rec dotProd v1[*,5,30] v2[*,5,30] = if (v1=[]) then 0.0{*,10,20} else ((hd v1)*(hd v2))+(dotProd (tl v1) (tl v2)) ;;

let dotProd v1[*,10,20] v2[*,10,20] = if (v1=[]) then 0.0 else ((hd v1)*(hd v2));;


let f y = 0.3 * y ;;
let rec euler f yn h t tf = if (t>=tf) then yn else (euler f (yn + (h * (f yn))) h (t+h) tf) ;;
euler f 0.0 0.1 0.0 1.0 ;;


lewhile ( c ) {
u :=0.3 * y t−1 ;
v :=0.7 * ( x t + x t−1 );
y t := u + v ;
y t−1 := y t ;
};

let filter x0 x1 y =
  let u = 0.3 * y in
  let v = 0.7 * (x1 + x0) 
  in u + v ;;


let rec filterList x y x0 =
  if (x=[]) then y 
  else
    let x1 = hd x in
    let y1 = filter x1 x0 y in
      filterList (tl x) y1 x1 ;;




let rec filter x y x0 =
  if (x=[]) then y
  else
    let x1 = hd x in
    let y1 = hd y in
    let u = 0.3 * y1 in
    let v = 0.7 * (x1 + x0) 
    in filter (tl x) ((u+v)::y) x1 ;; 



let rec filter x y x0 =
  if (x=[]) then y
  else
    let x1 = hd x in
    let u = 0.3 * y in
    let v = 0.7 * (x1 + x0) 
    in filter (tl x) (u+v) x1 ;; 


let sin x = (x - ((x * x * x) / 3.0)) + ((x * x * x * x * x) / 120.0) ;;


let rec euler yn{*,10,20} n = if (n=0) then yn else 
  let yNew = 3.0 * yn in
  let r =  yn - (0.1 * yNew)
  in (euler r (n-_ 1)) ;;


euler f 0.0 0.1 0.0 1.0 ;;

let rec euler yn{+,10,20} n =  
  let yNew = 3.0 * yn in
  let r =  yn - (0.01 * yNew)
  in (r) ;;

let pi x n a = if (n=10) then x else x + (

