type token =
  | PLUS
  | MINUS
  | MULT
  | DIV
  | IF
  | THEN
  | ELSE
  | BRABEG
  | BRAEND
  | PARBEG
  | PAREND
  | SHARP
  | LAMBDA
  | DOT
  | COMMA
  | FST
  | SND
  | EXIT
  | VERBOSE
  | BINARY
  | EOF
  | LT
  | GT
  | EQ
  | LTE
  | GTE
  | NEQ
  | COLON
  | STOP
  | LET
  | IN
  | REC
  | TRUE
  | FALSE
  | IPLUS
  | IMINUS
  | IMULT
  | IDIV
  | IMAX
  | IOTA
  | ACCBEG
  | ACCEND
  | CONS
  | CAR
  | CDR
  | SEMICOLON
  | ID of (string)
  | INT of (int)
  | FLOAT of (string)

open Parsing;;
let _ = parse_error;;
# 3 "./parser.mly"


open Types ;;
open Prelude ;;
open Primitives ;;
open Gmp ;;
open Print ;; 

# 64 "./parser.ml"
let yytransl_const = [|
  257 (* PLUS *);
  258 (* MINUS *);
  259 (* MULT *);
  260 (* DIV *);
  261 (* IF *);
  262 (* THEN *);
  263 (* ELSE *);
  264 (* BRABEG *);
  265 (* BRAEND *);
  266 (* PARBEG *);
  267 (* PAREND *);
  268 (* SHARP *);
  269 (* LAMBDA *);
  270 (* DOT *);
  271 (* COMMA *);
  272 (* FST *);
  273 (* SND *);
  274 (* EXIT *);
  275 (* VERBOSE *);
  276 (* BINARY *);
    0 (* EOF *);
  277 (* LT *);
  278 (* GT *);
  279 (* EQ *);
  280 (* LTE *);
  281 (* GTE *);
  282 (* NEQ *);
  283 (* COLON *);
  284 (* STOP *);
  285 (* LET *);
  286 (* IN *);
  287 (* REC *);
  288 (* TRUE *);
  289 (* FALSE *);
  290 (* IPLUS *);
  291 (* IMINUS *);
  292 (* IMULT *);
  293 (* IDIV *);
  294 (* IMAX *);
  295 (* IOTA *);
  296 (* ACCBEG *);
  297 (* ACCEND *);
  298 (* CONS *);
  299 (* CAR *);
  300 (* CDR *);
  301 (* SEMICOLON *);
    0|]

let yytransl_block = [|
  302 (* ID *);
  303 (* INT *);
  304 (* FLOAT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\002\000\002\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\006\000\
\006\000\000\000"

let yylen = "\002\000\
\002\000\005\000\006\000\007\000\012\000\002\000\003\000\003\000\
\001\000\006\000\002\000\007\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\006\000\003\000\006\000\
\003\000\002\000\002\000\002\000\003\000\002\000\002\000\003\000\
\001\000\001\000\004\000\006\000\001\000\001\000\002\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\008\000\008\000\008\000\008\000\008\000\008\000\003\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\042\000\000\000\000\000\
\038\000\037\000\000\000\058\000\000\000\033\000\040\000\000\000\
\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
\032\000\023\000\055\000\000\000\011\000\000\000\007\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
\036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000"

let yydgoto = "\002\000\
\020\000\025\000\033\000\022\000\023\000\029\000"

let yysindex = "\008\000\
\004\003\000\000\100\004\048\003\100\004\221\254\100\004\100\004\
\240\254\100\004\100\004\230\254\000\000\000\000\100\004\100\004\
\000\000\000\000\232\254\000\000\001\000\000\000\000\000\236\254\
\129\001\028\255\000\000\049\000\033\255\097\000\026\255\239\254\
\050\255\129\001\129\001\000\000\039\255\043\255\035\255\234\254\
\129\001\129\001\025\255\100\004\100\004\100\004\100\004\100\004\
\092\003\136\003\180\003\224\003\012\004\056\004\000\000\100\004\
\100\004\100\004\100\004\100\004\000\000\056\255\100\004\100\004\
\000\000\000\000\000\000\036\255\000\000\100\004\000\000\000\000\
\246\254\100\004\062\255\243\254\223\001\223\001\012\002\129\001\
\129\001\049\255\129\001\052\255\129\001\054\255\129\001\055\255\
\129\001\058\255\129\001\060\255\129\001\057\002\057\002\102\002\
\102\002\129\001\100\004\145\000\000\000\093\255\129\001\063\255\
\086\255\209\255\100\004\064\255\000\000\097\255\099\255\100\255\
\102\255\103\255\107\255\193\000\100\004\076\255\109\255\100\004\
\000\000\100\004\241\000\085\255\080\255\082\255\083\255\087\255\
\089\255\090\255\129\001\092\255\091\255\033\001\129\001\000\000\
\000\000\098\255\101\255\104\255\117\255\118\255\132\255\221\254\
\134\255\000\000\100\004\100\004\100\004\100\004\100\004\100\004\
\000\000\221\254\129\001\129\001\129\001\129\001\129\001\129\001\
\120\255\100\004\081\001\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\161\255\000\000\000\000\000\000\000\000\000\000\
\000\000\177\001\000\000\131\255\000\000\000\000\177\001\250\254\
\000\000\130\002\255\002\000\000\177\001\177\001\000\000\000\000\
\112\004\128\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\255\241\002\229\002\144\004\
\153\004\000\000\160\004\000\000\169\004\000\000\185\004\000\000\
\195\004\000\000\201\004\000\000\211\004\199\002\211\002\150\002\
\162\002\227\004\000\000\000\000\000\000\000\000\236\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\243\004\000\000\000\000\000\000\252\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\005\022\005\028\005\038\005\054\005\063\005\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\237\255\030\000\253\255\077\000"

let yytablesize = 1644
let yytable = "\021\000\
\074\000\108\000\028\000\030\000\039\000\034\000\035\000\009\000\
\001\000\010\000\032\000\036\000\069\000\041\000\042\000\043\000\
\009\000\061\000\010\000\040\000\075\000\061\000\068\000\032\000\
\061\000\062\000\061\000\109\000\032\000\104\000\061\000\061\000\
\026\000\063\000\031\000\032\000\067\000\061\000\061\000\037\000\
\038\000\065\000\077\000\078\000\079\000\080\000\081\000\083\000\
\085\000\087\000\089\000\091\000\093\000\105\000\094\000\095\000\
\096\000\097\000\098\000\013\000\013\000\100\000\028\000\070\000\
\013\000\013\000\071\000\013\000\103\000\013\000\072\000\076\000\
\106\000\061\000\061\000\061\000\061\000\061\000\099\000\061\000\
\073\000\061\000\102\000\061\000\107\000\061\000\013\000\061\000\
\013\000\061\000\061\000\061\000\061\000\061\000\061\000\110\000\
\061\000\116\000\111\000\061\000\112\000\113\000\061\000\013\000\
\114\000\123\000\115\000\118\000\120\000\119\000\124\000\125\000\
\061\000\126\000\127\000\131\000\128\000\129\000\134\000\061\000\
\135\000\130\000\132\000\133\000\153\000\137\000\138\000\061\000\
\139\000\140\000\061\000\061\000\144\000\141\000\161\000\142\000\
\143\000\145\000\147\000\056\000\101\000\148\000\162\000\000\000\
\149\000\155\000\156\000\157\000\158\000\159\000\160\000\061\000\
\061\000\061\000\061\000\061\000\061\000\150\000\151\000\061\000\
\163\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\152\000\034\000\154\000\034\000\
\034\000\034\000\000\000\000\000\000\000\034\000\034\000\034\000\
\034\000\034\000\034\000\000\000\034\000\034\000\034\000\000\000\
\034\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
\000\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\044\000\045\000\046\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\121\000\024\000\122\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\044\000\045\000\046\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\055\000\024\000\000\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\044\000\045\000\046\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\024\000\000\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\064\000\017\000\018\000\
\019\000\044\000\045\000\046\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\066\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\024\000\000\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\044\000\045\000\046\000\047\000\003\000\000\000\117\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\024\000\000\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\044\000\045\000\046\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\024\000\122\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\044\000\045\000\046\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\136\000\024\000\000\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\044\000\045\000\046\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\146\000\024\000\000\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\044\000\045\000\046\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\164\000\024\000\000\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\044\000\045\000\046\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\024\000\000\000\000\000\
\013\000\014\000\056\000\057\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\033\000\033\000\033\000\033\000\033\000\000\000\000\000\
\033\000\000\000\033\000\000\000\000\000\033\000\000\000\033\000\
\033\000\033\000\000\000\000\000\000\000\033\000\033\000\033\000\
\033\000\033\000\033\000\000\000\000\000\033\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\000\000\000\000\
\000\000\000\000\033\000\033\000\033\000\000\000\033\000\033\000\
\033\000\046\000\047\000\003\000\000\000\000\000\004\000\000\000\
\005\000\000\000\000\000\006\000\000\000\048\000\007\000\008\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\053\000\
\054\000\000\000\000\000\024\000\000\000\000\000\013\000\014\000\
\056\000\057\000\058\000\059\000\000\000\000\000\000\000\000\000\
\060\000\015\000\016\000\000\000\017\000\018\000\019\000\047\000\
\003\000\000\000\000\000\004\000\000\000\005\000\000\000\000\000\
\006\000\000\000\048\000\007\000\008\000\000\000\000\000\000\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\000\000\
\024\000\000\000\000\000\013\000\014\000\056\000\057\000\058\000\
\059\000\000\000\000\000\000\000\000\000\060\000\015\000\016\000\
\000\000\017\000\018\000\019\000\047\000\003\000\000\000\000\000\
\004\000\000\000\005\000\000\000\000\000\006\000\000\000\048\000\
\007\000\008\000\000\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\000\000\000\000\024\000\000\000\000\000\
\013\000\014\000\000\000\000\000\058\000\059\000\000\000\000\000\
\000\000\000\000\060\000\015\000\016\000\000\000\017\000\018\000\
\019\000\047\000\003\000\000\000\000\000\004\000\000\000\005\000\
\000\000\000\000\006\000\000\000\048\000\007\000\008\000\000\000\
\000\000\000\000\049\000\050\000\051\000\052\000\053\000\054\000\
\000\000\000\000\024\000\000\000\000\000\013\000\014\000\026\000\
\026\000\000\000\026\000\000\000\026\000\000\000\000\000\060\000\
\015\000\016\000\000\000\017\000\018\000\019\000\019\000\019\000\
\019\000\000\000\000\000\019\000\019\000\026\000\019\000\026\000\
\019\000\000\000\020\000\020\000\020\000\000\000\000\000\020\000\
\020\000\000\000\020\000\000\000\020\000\000\000\026\000\000\000\
\000\000\019\000\000\000\019\000\000\000\000\000\000\000\019\000\
\019\000\019\000\019\000\000\000\000\000\020\000\000\000\020\000\
\000\000\000\000\019\000\020\000\020\000\020\000\020\000\017\000\
\017\000\017\000\000\000\000\000\017\000\017\000\020\000\017\000\
\000\000\017\000\000\000\018\000\018\000\018\000\000\000\000\000\
\018\000\018\000\000\000\018\000\000\000\018\000\000\000\000\000\
\000\000\000\000\017\000\000\000\017\000\015\000\015\000\015\000\
\017\000\017\000\015\000\015\000\000\000\015\000\018\000\015\000\
\018\000\014\000\014\000\017\000\018\000\018\000\014\000\014\000\
\000\000\014\000\000\000\014\000\000\000\000\000\000\000\018\000\
\015\000\000\000\015\000\000\000\027\000\027\000\000\000\027\000\
\003\000\027\000\000\000\004\000\014\000\005\000\014\000\000\000\
\006\000\015\000\000\000\007\000\008\000\009\000\010\000\011\000\
\000\000\000\000\027\000\000\000\027\000\014\000\000\000\000\000\
\012\000\000\000\000\000\013\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\015\000\016\000\
\000\000\017\000\018\000\019\000\003\000\000\000\000\000\004\000\
\027\000\005\000\000\000\000\000\006\000\000\000\000\000\007\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\013\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\016\000\000\000\017\000\018\000\019\000\
\003\000\000\000\000\000\004\000\000\000\005\000\000\000\000\000\
\006\000\000\000\000\000\007\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\013\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\082\000\000\000\000\000\015\000\016\000\
\000\000\017\000\018\000\019\000\003\000\000\000\000\000\004\000\
\000\000\005\000\000\000\000\000\006\000\000\000\000\000\007\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\013\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\084\000\
\000\000\000\000\015\000\016\000\000\000\017\000\018\000\019\000\
\003\000\000\000\000\000\004\000\000\000\005\000\000\000\000\000\
\006\000\000\000\000\000\007\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\013\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\086\000\000\000\000\000\015\000\016\000\
\000\000\017\000\018\000\019\000\003\000\000\000\000\000\004\000\
\000\000\005\000\000\000\000\000\006\000\000\000\000\000\007\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\013\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\088\000\
\000\000\000\000\015\000\016\000\000\000\017\000\018\000\019\000\
\003\000\000\000\000\000\004\000\000\000\005\000\000\000\000\000\
\006\000\000\000\000\000\007\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\013\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\090\000\000\000\000\000\015\000\016\000\
\000\000\017\000\018\000\019\000\003\000\000\000\000\000\004\000\
\000\000\005\000\000\000\000\000\006\000\000\000\000\000\007\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\013\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\092\000\
\000\000\000\000\015\000\016\000\000\000\017\000\018\000\019\000\
\003\000\000\000\000\000\004\000\000\000\005\000\000\000\000\000\
\006\000\000\000\000\000\007\000\008\000\030\000\030\000\000\000\
\030\000\000\000\030\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\013\000\014\000\031\000\031\000\000\000\
\031\000\000\000\031\000\030\000\000\000\030\000\015\000\016\000\
\000\000\017\000\018\000\019\000\000\000\016\000\016\000\000\000\
\016\000\000\000\016\000\031\000\030\000\031\000\025\000\025\000\
\000\000\025\000\000\000\025\000\000\000\044\000\044\000\000\000\
\044\000\000\000\044\000\016\000\031\000\016\000\045\000\045\000\
\000\000\045\000\000\000\045\000\025\000\000\000\025\000\000\000\
\000\000\000\000\000\000\044\000\016\000\044\000\043\000\043\000\
\000\000\043\000\000\000\043\000\045\000\025\000\045\000\000\000\
\046\000\046\000\000\000\046\000\044\000\046\000\047\000\047\000\
\000\000\047\000\000\000\047\000\043\000\045\000\043\000\000\000\
\048\000\048\000\000\000\048\000\000\000\048\000\046\000\000\000\
\046\000\000\000\000\000\000\000\047\000\043\000\047\000\000\000\
\029\000\029\000\000\000\029\000\000\000\029\000\048\000\046\000\
\048\000\021\000\021\000\000\000\021\000\047\000\021\000\000\000\
\022\000\022\000\000\000\022\000\000\000\022\000\029\000\048\000\
\029\000\024\000\024\000\000\000\024\000\000\000\024\000\021\000\
\000\000\021\000\000\000\000\000\000\000\000\000\022\000\029\000\
\022\000\050\000\050\000\000\000\050\000\000\000\050\000\024\000\
\021\000\024\000\000\000\052\000\052\000\000\000\052\000\022\000\
\052\000\049\000\049\000\000\000\049\000\000\000\049\000\050\000\
\024\000\050\000\000\000\051\000\051\000\000\000\051\000\000\000\
\051\000\052\000\000\000\052\000\000\000\000\000\000\000\049\000\
\050\000\049\000\000\000\053\000\053\000\000\000\053\000\000\000\
\053\000\051\000\052\000\051\000\054\000\054\000\000\000\054\000\
\049\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\051\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\000\000\054\000\000\000\000\000\000\000\
\000\000\000\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000"

let yycheck = "\001\000\
\023\001\015\001\004\000\005\000\031\001\007\000\008\000\014\001\
\001\000\014\001\046\001\028\001\032\000\015\000\016\000\040\001\
\023\001\021\000\023\001\046\001\040\000\025\000\040\001\046\001\
\028\000\046\001\030\000\041\001\046\001\040\001\034\000\035\000\
\003\000\006\001\005\000\046\001\011\001\041\000\042\000\010\000\
\011\000\009\001\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\073\000\056\000\057\000\
\058\000\059\000\060\000\001\001\002\001\063\000\064\000\014\001\
\006\001\007\001\028\001\009\001\070\000\011\001\028\001\047\001\
\074\000\077\000\078\000\079\000\080\000\081\000\023\001\083\000\
\046\001\085\000\047\001\087\000\023\001\089\000\028\001\091\000\
\030\001\093\000\094\000\095\000\096\000\097\000\098\000\047\001\
\100\000\099\000\047\001\103\000\047\001\047\001\106\000\045\001\
\047\001\107\000\047\001\015\001\023\001\047\001\047\001\015\001\
\116\000\015\001\015\001\117\000\015\001\015\001\120\000\123\000\
\122\000\015\001\047\001\015\001\144\000\041\001\047\001\131\000\
\047\001\047\001\134\000\135\000\041\001\047\001\154\000\047\001\
\047\001\047\001\041\001\009\001\064\000\041\001\023\001\255\255\
\041\001\147\000\148\000\149\000\150\000\151\000\152\000\155\000\
\156\000\157\000\158\000\159\000\160\000\041\001\041\001\163\000\
\162\000\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\041\001\013\001\041\001\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\011\001\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\003\001\004\001\005\001\255\255\255\255\008\001\255\255\
\010\001\255\255\255\255\013\001\255\255\015\001\016\001\017\001\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\029\001\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\255\255\255\255\255\255\
\042\001\043\001\044\001\255\255\046\001\047\001\048\001\004\001\
\005\001\255\255\255\255\008\001\255\255\010\001\255\255\255\255\
\013\001\255\255\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\029\001\255\255\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\255\255\255\255\255\255\042\001\043\001\044\001\
\255\255\046\001\047\001\048\001\004\001\005\001\255\255\255\255\
\008\001\255\255\010\001\255\255\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\032\001\033\001\255\255\255\255\036\001\037\001\255\255\255\255\
\255\255\255\255\042\001\043\001\044\001\255\255\046\001\047\001\
\048\001\004\001\005\001\255\255\255\255\008\001\255\255\010\001\
\255\255\255\255\013\001\255\255\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\029\001\255\255\255\255\032\001\033\001\006\001\
\007\001\255\255\009\001\255\255\011\001\255\255\255\255\042\001\
\043\001\044\001\255\255\046\001\047\001\048\001\001\001\002\001\
\003\001\255\255\255\255\006\001\007\001\028\001\009\001\030\001\
\011\001\255\255\001\001\002\001\003\001\255\255\255\255\006\001\
\007\001\255\255\009\001\255\255\011\001\255\255\045\001\255\255\
\255\255\028\001\255\255\030\001\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\255\255\255\255\028\001\255\255\030\001\
\255\255\255\255\045\001\034\001\035\001\036\001\037\001\001\001\
\002\001\003\001\255\255\255\255\006\001\007\001\045\001\009\001\
\255\255\011\001\255\255\001\001\002\001\003\001\255\255\255\255\
\006\001\007\001\255\255\009\001\255\255\011\001\255\255\255\255\
\255\255\255\255\028\001\255\255\030\001\001\001\002\001\003\001\
\034\001\035\001\006\001\007\001\255\255\009\001\028\001\011\001\
\030\001\001\001\002\001\045\001\034\001\035\001\006\001\007\001\
\255\255\009\001\255\255\011\001\255\255\255\255\255\255\045\001\
\028\001\255\255\030\001\255\255\006\001\007\001\255\255\009\001\
\005\001\011\001\255\255\008\001\028\001\010\001\030\001\255\255\
\013\001\045\001\255\255\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\028\001\255\255\030\001\045\001\255\255\255\255\
\029\001\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\045\001\255\255\255\255\043\001\044\001\
\255\255\046\001\047\001\048\001\005\001\255\255\255\255\008\001\
\009\001\010\001\255\255\255\255\013\001\255\255\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\044\001\255\255\046\001\047\001\048\001\
\005\001\255\255\255\255\008\001\255\255\010\001\255\255\255\255\
\013\001\255\255\255\255\016\001\017\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\255\255\255\255\043\001\044\001\
\255\255\046\001\047\001\048\001\005\001\255\255\255\255\008\001\
\255\255\010\001\255\255\255\255\013\001\255\255\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\255\255\046\001\047\001\048\001\
\005\001\255\255\255\255\008\001\255\255\010\001\255\255\255\255\
\013\001\255\255\255\255\016\001\017\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\255\255\255\255\043\001\044\001\
\255\255\046\001\047\001\048\001\005\001\255\255\255\255\008\001\
\255\255\010\001\255\255\255\255\013\001\255\255\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\255\255\046\001\047\001\048\001\
\005\001\255\255\255\255\008\001\255\255\010\001\255\255\255\255\
\013\001\255\255\255\255\016\001\017\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001\255\255\255\255\043\001\044\001\
\255\255\046\001\047\001\048\001\005\001\255\255\255\255\008\001\
\255\255\010\001\255\255\255\255\013\001\255\255\255\255\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\040\001\
\255\255\255\255\043\001\044\001\255\255\046\001\047\001\048\001\
\005\001\255\255\255\255\008\001\255\255\010\001\255\255\255\255\
\013\001\255\255\255\255\016\001\017\001\006\001\007\001\255\255\
\009\001\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\029\001\255\255\255\255\032\001\033\001\006\001\007\001\255\255\
\009\001\255\255\011\001\028\001\255\255\030\001\043\001\044\001\
\255\255\046\001\047\001\048\001\255\255\006\001\007\001\255\255\
\009\001\255\255\011\001\028\001\045\001\030\001\006\001\007\001\
\255\255\009\001\255\255\011\001\255\255\006\001\007\001\255\255\
\009\001\255\255\011\001\028\001\045\001\030\001\006\001\007\001\
\255\255\009\001\255\255\011\001\028\001\255\255\030\001\255\255\
\255\255\255\255\255\255\028\001\045\001\030\001\006\001\007\001\
\255\255\009\001\255\255\011\001\028\001\045\001\030\001\255\255\
\006\001\007\001\255\255\009\001\045\001\011\001\006\001\007\001\
\255\255\009\001\255\255\011\001\028\001\045\001\030\001\255\255\
\006\001\007\001\255\255\009\001\255\255\011\001\028\001\255\255\
\030\001\255\255\255\255\255\255\028\001\045\001\030\001\255\255\
\006\001\007\001\255\255\009\001\255\255\011\001\028\001\045\001\
\030\001\006\001\007\001\255\255\009\001\045\001\011\001\255\255\
\006\001\007\001\255\255\009\001\255\255\011\001\028\001\045\001\
\030\001\006\001\007\001\255\255\009\001\255\255\011\001\028\001\
\255\255\030\001\255\255\255\255\255\255\255\255\028\001\045\001\
\030\001\006\001\007\001\255\255\009\001\255\255\011\001\028\001\
\045\001\030\001\255\255\006\001\007\001\255\255\009\001\045\001\
\011\001\006\001\007\001\255\255\009\001\255\255\011\001\028\001\
\045\001\030\001\255\255\006\001\007\001\255\255\009\001\255\255\
\011\001\028\001\255\255\030\001\255\255\255\255\255\255\028\001\
\045\001\030\001\255\255\006\001\007\001\255\255\009\001\255\255\
\011\001\028\001\045\001\030\001\006\001\007\001\255\255\009\001\
\045\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\028\001\045\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\255\255\030\001\255\255\255\255\255\255\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\045\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  IF\000\
  THEN\000\
  ELSE\000\
  BRABEG\000\
  BRAEND\000\
  PARBEG\000\
  PAREND\000\
  SHARP\000\
  LAMBDA\000\
  DOT\000\
  COMMA\000\
  FST\000\
  SND\000\
  EXIT\000\
  VERBOSE\000\
  BINARY\000\
  EOF\000\
  LT\000\
  GT\000\
  EQ\000\
  LTE\000\
  GTE\000\
  NEQ\000\
  COLON\000\
  STOP\000\
  LET\000\
  IN\000\
  REC\000\
  TRUE\000\
  FALSE\000\
  IPLUS\000\
  IMINUS\000\
  IMULT\000\
  IDIV\000\
  IMAX\000\
  IOTA\000\
  ACCBEG\000\
  ACCEND\000\
  CONS\000\
  CAR\000\
  CDR\000\
  SEMICOLON\000\
  "

let yynames_block = "\
  ID\000\
  INT\000\
  FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 31 "./parser.mly"
                                             ( TopExpr(_1) )
# 694 "./parser.ml"
               :  Types.toplevel ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 32 "./parser.mly"
                                                               ( TopAssign(_2,_4) )
# 702 "./parser.ml"
               :  Types.toplevel ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'idlist) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 33 "./parser.mly"
                                                               ( let _ = typeEnv := setEnv _2 (makeTypeFun (fst _3)) !typeEnv in
TopAssign(_2,makeFun (snd _3) _5) )
# 712 "./parser.ml"
               :  Types.toplevel ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'idlist) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 35 "./parser.mly"
                                                               ( let _ = typeEnv := setEnv _3 (makeTypeFun (fst _4)) !typeEnv in TopRecAssign(_3,makeFun (snd _4) _6) )
# 721 "./parser.ml"
               :  Types.toplevel ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'idlist) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 36 "./parser.mly"
                                                                                           ( let _ = typeEnv := setEnv _3 (makeTypeFun2 (fst _9) (TFloat(ref (Int 2),ref (Int _5),ref (Int _7)))) !typeEnv in 
let _ = err ("\n"^_3^"="^(printExpr (makeTypeFun (fst _9)))^"\n") in
TopRecAssign(_3,makeFun (snd _9) _11) )
# 734 "./parser.ml"
               :  Types.toplevel ))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "./parser.mly"
                                                               ( Exit )
# 740 "./parser.ml"
               :  Types.toplevel ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bexpr) in
    Obj.repr(
# 40 "./parser.mly"
                                                               ( TopVerbose(_2) )
# 747 "./parser.ml"
               :  Types.toplevel ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bexpr) in
    Obj.repr(
# 41 "./parser.mly"
                                                               ( TopBinary(_2) )
# 754 "./parser.ml"
               :  Types.toplevel ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 43 "./parser.mly"
                                                               ( ([newTypeVar ()],[_1]) )
# 761 "./parser.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 44 "./parser.mly"
                                                               ( ([TFloat(ref (Int 2),ref (Int _3),ref (Int _5))],[_1]) )
# 770 "./parser.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'idlist) in
    Obj.repr(
# 45 "./parser.mly"
                                                               ( ((newTypeVar ())::(fst _2),_1::(snd _2)) )
# 778 "./parser.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'idlist) in
    Obj.repr(
# 46 "./parser.mly"
                                                               ( ((TFloat(ref (Int 2),ref (Int _3),ref (Int _5)))::(fst _7),_1::(snd _7)) )
# 788 "./parser.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "./parser.mly"
                                                               ( let i = newInt () in 
                                                                 let _ = varEnv := setEnv ("+__"^(string_of_int i)) (newPlusVar 0 0) !varEnv in
                                                                 let _ = typeEnv := setEnv ("+__"^(string_of_int i)) (newPlusType ()) !typeEnv in
                                                                   App(App(Id("+__"^(string_of_int i)),_1),_3) )
# 799 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "./parser.mly"
                                                               ( let i = newInt () in 
                                                                 let _ = varEnv := setEnv ("-__"^(string_of_int i)) (newMinusVar 0 0) !varEnv in
                                                                 let _ = typeEnv := setEnv ("-__"^(string_of_int i)) (newMinusType ()) !typeEnv in
                                                                   App(App(Id("-__"^(string_of_int i)),_1),_3) )
# 810 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "./parser.mly"
                                                               ( let i = newInt () in 
                                                                 let _ = varEnv := setEnv ("*__"^(string_of_int i)) (newMultVar 0 0) !varEnv in
                                                                 let _ = typeEnv := setEnv ("*__"^(string_of_int i)) (newMultType ()) !typeEnv in
                                                                   App(App(Id("*__"^(string_of_int i)),_1),_3) )
# 821 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "./parser.mly"
                                                               ( let i = newInt () in 
                                                                 let _ = varEnv := setEnv ("/__"^(string_of_int i)) (newDivVar 0 0) !varEnv in
                                                                 let _ = typeEnv := setEnv ("/__"^(string_of_int i)) (newDivType ()) !typeEnv in
                                                                   App(App(Id("/__"^(string_of_int i)),_1),_3) )
# 832 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "./parser.mly"
                                                               ( App(App(Id("+I_"),_1),_3) )
# 840 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "./parser.mly"
                                                               ( App(App(Id("-I_"),_1),_3) )
# 848 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "./parser.mly"
                                                               ( App(App(Id("*I_"),_1),_3) )
# 856 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "./parser.mly"
                                                               ( App(App(Id("/I_"),_1),_3) )
# 864 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'idlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "./parser.mly"
                                                               ( makeFun (snd _2) _4 )
# 872 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'bexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "./parser.mly"
                                                               ( Cond(_2,_4,_6) )
# 881 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 70 "./parser.mly"
                                                               ( _2 )
# 888 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "./parser.mly"
                                                               ( Let(_2,_4,_6) )
# 897 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "./parser.mly"
                                                               ( Pair(_1,_3) )
# 905 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "./parser.mly"
                                                               ( First(_2) )
# 912 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "./parser.mly"
                                                               ( Second(_2) )
# 919 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "./parser.mly"
                                                               ( Nil )
# 925 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "./parser.mly"
                                                               ( Cons(_1,_3) )
# 933 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "./parser.mly"
                                                 ( Car(_2) )
# 940 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "./parser.mly"
                                                         ( Cdr(_2) )
# 947 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'listElts) in
    Obj.repr(
# 80 "./parser.mly"
                                                         ( _2 )
# 954 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bexpr) in
    Obj.repr(
# 82 "./parser.mly"
                                                               ( _1 )
# 961 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "./parser.mly"
                                                               ( Float(my_f_of_string_prec _1 53,ufp (float_of_string _1),53) )
# 968 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 84 "./parser.mly"
                                                   ( Float(my_f_of_string_prec _1 _3,ufp (float_of_string _1),_3) )
# 976 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 85 "./parser.mly"
                                                          ( if (_3-(ufp (float_of_string _1))+1<=_5) then Float(my_f_of_string_prec _1 _3,_3,_5) 
				                                                 else raise (Error ("Zero accuracy value: "^_1^" has ufp "^(string_of_int (ufp (float_of_string _1)))^
																 " but type Float{"^(string_of_int _3)^","^(string_of_int _5)^"} has ulp "^(string_of_int (_3-_5+1))))
															   )
# 988 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 89 "./parser.mly"
                                                               ( Int(_1) )
# 995 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "./parser.mly"
                                                               ( Id(_1) )
# 1002 "./parser.ml"
               : 'exprNoApp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprNoApp) in
    Obj.repr(
# 92 "./parser.mly"
                                                               ( App(_1,_2) )
# 1010 "./parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exprNoApp) in
    Obj.repr(
# 93 "./parser.mly"
                                                               ( _1 )
# 1017 "./parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "./parser.mly"
                                                               ( Bool(true) )
# 1023 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "./parser.mly"
                                                               ( Bool(false) )
# 1029 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "./parser.mly"
                                                               ( App(App(Id("=B_"),_1),_3) )
# 1037 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "./parser.mly"
                                                               ( App(App(Id("<B_"),_1),_3) )
# 1045 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "./parser.mly"
                                                               ( App(App(Id(">B_"),_1),_3) )
# 1053 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "./parser.mly"
                                                               ( App(App(Id("<=_"),_1),_3) )
# 1061 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "./parser.mly"
                                                               ( App(App(Id(">=_"),_1),_3) )
# 1069 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "./parser.mly"
                                                               ( App(App(Id("!=_"),_1),_3) )
# 1077 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "./parser.mly"
                                                               ( let i = newInt () in
                                                                 let _ = varEnv := setEnv ("=F_"^(string_of_int i)) (newEqFloatVar _4 _6) !varEnv in
                                                                 let _ = typeEnv := setEnv ("=F_"^(string_of_int i)) (newEqFloatType 2 _4 _6) !typeEnv in
                                                                   App(App(Id("=F_"^(string_of_int i)),_1),_8) )
# 1090 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "./parser.mly"
                                                               ( let i = newInt () in
                                                                 let _ = varEnv := setEnv ("<F_"^(string_of_int i)) (newLtFloatVar _4 _6) !varEnv in
                                                                 let _ = typeEnv := setEnv ("<F_"^(string_of_int i)) (newLtFloatType 2 _4 _6) !typeEnv in
                                                                   App(App(Id("<F_"^(string_of_int i)),_1),_8) )
# 1103 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "./parser.mly"
                                                                ( let i = newInt () in
                                                                 let _ = varEnv := setEnv ("<=F"^(string_of_int i)) (newLteFloatVar _4 _6) !varEnv in
                                                                 let _ = typeEnv := setEnv ("<=F"^(string_of_int i)) (newLteFloatType 2 _4 _6) !typeEnv in
                                                                   App(App(Id("<=F"^(string_of_int i)),_1),_8) )
# 1116 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "./parser.mly"
                                                               ( let i = newInt () in
                                                                 let _ = varEnv := setEnv (">F_"^(string_of_int i)) (newGtFloatVar _4 _6) !varEnv in
                                                                 let _ = typeEnv := setEnv (">F_"^(string_of_int i)) (newGtFloatType 2 _4 _6) !typeEnv in
                                                                   App(App(Id(">F_"^(string_of_int i)),_1),_8) )
# 1129 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "./parser.mly"
                                                                ( let i = newInt () in
                                                                 let _ = varEnv := setEnv (">=F"^(string_of_int i)) (newGteFloatVar _4 _6) !varEnv in
                                                                 let _ = typeEnv := setEnv (">=F"^(string_of_int i)) (newGteFloatType 2 _4 _6) !typeEnv in
                                                                   App(App(Id(">=F"^(string_of_int i)),_1),_8) )
# 1142 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "./parser.mly"
                                                                ( let i = newInt () in
                                                                 let _ = varEnv := setEnv ("!=F"^(string_of_int i)) (newNeqFloatVar _4 _6) !varEnv in
                                                                 let _ = typeEnv := setEnv ("!=F"^(string_of_int i)) (newNeqFloatType 2 _4 _6) !typeEnv in
                                                                   App(App(Id("!=F"^(string_of_int i)),_1),_8) )
# 1155 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bexpr) in
    Obj.repr(
# 130 "./parser.mly"
                                                               ( _2 )
# 1162 "./parser.ml"
               : 'bexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "./parser.mly"
                                                               ( Cons(_1,Nil) )
# 1169 "./parser.ml"
               : 'listElts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'listElts) in
    Obj.repr(
# 133 "./parser.mly"
                                                               ( Cons(_1,_3) )
# 1177 "./parser.ml"
               : 'listElts))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Types.toplevel )
;;
# 135 "./parser.mly"
 

# 1205 "./parser.ml"
